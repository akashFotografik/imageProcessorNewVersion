
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firebaseId: 'firebaseId',
  email: 'email',
  fullName: 'fullName',
  phone: 'phone',
  profileImage: 'profileImage',
  employeeId: 'employeeId',
  designation: 'designation',
  role: 'role',
  isActive: 'isActive',
  dateOfJoining: 'dateOfJoining',
  dateOfBirth: 'dateOfBirth',
  address: 'address',
  emergencyContact: 'emergencyContact',
  salary: 'salary',
  workingHoursPerDay: 'workingHoursPerDay',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  departmentId: 'departmentId',
  managerId: 'managerId',
  Salary: 'Salary'
};

exports.Prisma.UserCompanyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  role: 'role',
  isActive: 'isActive',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  logo: 'logo',
  industry: 'industry',
  gstNumber: 'gstNumber',
  panNumber: 'panNumber',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  Country: 'Country',
  totalCredits: 'totalCredits',
  usedCredits: 'usedCredits'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  headOfDeptId: 'headOfDeptId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  clockInTime: 'clockInTime',
  clockOutTime: 'clockOutTime',
  workingHours: 'workingHours',
  overtimeHours: 'overtimeHours',
  status: 'status',
  location: 'location',
  notes: 'notes',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  companyId: 'companyId'
};

exports.Prisma.LeaveScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  leaveType: 'leaveType',
  reason: 'reason',
  status: 'status',
  appliedDate: 'appliedDate',
  approvedBy: 'approvedBy',
  rejectedBy: 'rejectedBy',
  comments: 'comments',
  totalDays: 'totalDays',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  companyId: 'companyId'
};

exports.Prisma.WorkingDayScalarFieldEnum = {
  id: 'id',
  dayOfWeek: 'dayOfWeek',
  isWorking: 'isWorking',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  startDate: 'startDate',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  progress: 'progress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  assignedToId: 'assignedToId',
  createdById: 'createdById',
  departmentId: 'departmentId',
  companyId: 'companyId'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.ChatMemberScalarFieldEnum = {
  id: 'id',
  isAdmin: 'isAdmin',
  joinedAt: 'joinedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  chatId: 'chatId',
  userId: 'userId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  isPinned: 'isPinned',
  replyTo: 'replyTo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  chatId: 'chatId',
  senderId: 'senderId'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  sku: 'sku',
  category: 'category',
  unit: 'unit',
  currentStock: 'currentStock',
  minimumStock: 'minimumStock',
  maximumStock: 'maximumStock',
  reorderLevel: 'reorderLevel',
  unitPrice: 'unitPrice',
  location: 'location',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.InventoryMovementScalarFieldEnum = {
  id: 'id',
  movementType: 'movementType',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  reference: 'reference',
  notes: 'notes',
  movedBy: 'movedBy',
  createdAt: 'createdAt',
  itemId: 'itemId'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  address: 'address',
  gstNumber: 'gstNumber',
  panNumber: 'panNumber',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.SupplierItemScalarFieldEnum = {
  id: 'id',
  supplierPrice: 'supplierPrice',
  leadTime: 'leadTime',
  isPreferred: 'isPreferred',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  supplierId: 'supplierId',
  itemId: 'itemId'
};

exports.Prisma.GatePassScalarFieldEnum = {
  id: 'id',
  passNumber: 'passNumber',
  type: 'type',
  purpose: 'purpose',
  visitorName: 'visitorName',
  visitorPhone: 'visitorPhone',
  visitorCompany: 'visitorCompany',
  vehicleNumber: 'vehicleNumber',
  itemsCarried: 'itemsCarried',
  entryTime: 'entryTime',
  exitTime: 'exitTime',
  status: 'status',
  validUntil: 'validUntil',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  createdById: 'createdById',
  forUserId: 'forUserId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  documentType: 'documentType',
  isConfidential: 'isConfidential',
  expiryDate: 'expiryDate',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  uploadedById: 'uploadedById'
};

exports.Prisma.PerformanceReviewScalarFieldEnum = {
  id: 'id',
  reviewPeriodStart: 'reviewPeriodStart',
  reviewPeriodEnd: 'reviewPeriodEnd',
  overallRating: 'overallRating',
  goalsAchieved: 'goalsAchieved',
  punctualityScore: 'punctualityScore',
  qualityScore: 'qualityScore',
  communicationScore: 'communicationScore',
  teamworkScore: 'teamworkScore',
  comments: 'comments',
  goals: 'goals',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reviewForId: 'reviewForId',
  reviewById: 'reviewById',
  companyId: 'companyId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  oldData: 'oldData',
  newData: 'newData',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  description: 'description',
  createdAt: 'createdAt',
  companyId: 'companyId',
  userId: 'userId'
};

exports.Prisma.CreditsRechargeScalarFieldEnum = {
  id: 'id',
  credits: 'credits',
  amountPaid: 'amountPaid',
  transactionId: 'transactionId',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  purchasedById: 'purchasedById'
};

exports.Prisma.TransactionHistoryScalarFieldEnum = {
  id: 'id',
  creditsUsed: 'creditsUsed',
  description: 'description',
  createdAt: 'createdAt',
  companyId: 'companyId',
  serviceId: 'serviceId',
  numberOfDaysUsed: 'numberOfDaysUsed',
  enabledById: 'enabledById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  MANAGER: 'MANAGER',
  EMPLOYEE: 'EMPLOYEE',
  INTERN: 'INTERN',
  ADMIN: 'ADMIN',
  DIRECTOR: 'DIRECTOR'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  HALF_DAY: 'HALF_DAY',
  WORK_FROM_HOME: 'WORK_FROM_HOME'
};

exports.LeaveType = exports.$Enums.LeaveType = {
  SICK_LEAVE: 'SICK_LEAVE',
  CASUAL_LEAVE: 'CASUAL_LEAVE',
  ANNUAL_LEAVE: 'ANNUAL_LEAVE',
  MATERNITY_LEAVE: 'MATERNITY_LEAVE',
  PATERNITY_LEAVE: 'PATERNITY_LEAVE',
  EMERGENCY_LEAVE: 'EMERGENCY_LEAVE',
  UNPAID_LEAVE: 'UNPAID_LEAVE'
};

exports.LeaveStatus = exports.$Enums.LeaveStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  ON_HOLD: 'ON_HOLD'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ChatType = exports.$Enums.ChatType = {
  PERSONAL: 'PERSONAL',
  GROUP: 'GROUP',
  GENERAL: 'GENERAL'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  VOICE: 'VOICE'
};

exports.InventoryMovementType = exports.$Enums.InventoryMovementType = {
  IN: 'IN',
  OUT: 'OUT',
  ADJUSTMENT: 'ADJUSTMENT',
  RETURN: 'RETURN'
};

exports.GatePassType = exports.$Enums.GatePassType = {
  EMPLOYEE: 'EMPLOYEE',
  INTERVIEW: 'INTERVIEW',
  VISITOR: 'VISITOR',
  OFFICIAL: 'OFFICIAL'
};

exports.GatePassStatus = exports.$Enums.GatePassStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  CONTRACT: 'CONTRACT',
  INVOICE: 'INVOICE',
  RECEIPT: 'RECEIPT',
  POLICY: 'POLICY',
  CERTIFICATE: 'CERTIFICATE',
  REPORT: 'REPORT',
  OTHER: 'OTHER'
};

exports.AuditLogAction = exports.$Enums.AuditLogAction = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  VIEW: 'VIEW',
  DOWNLOAD: 'DOWNLOAD',
  UPLOAD: 'UPLOAD'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserCompany: 'UserCompany',
  Company: 'Company',
  Service: 'Service',
  Department: 'Department',
  Attendance: 'Attendance',
  Leave: 'Leave',
  WorkingDay: 'WorkingDay',
  Task: 'Task',
  Chat: 'Chat',
  ChatMember: 'ChatMember',
  Message: 'Message',
  InventoryItem: 'InventoryItem',
  InventoryMovement: 'InventoryMovement',
  Supplier: 'Supplier',
  SupplierItem: 'SupplierItem',
  GatePass: 'GatePass',
  Document: 'Document',
  PerformanceReview: 'PerformanceReview',
  AuditLog: 'AuditLog',
  CreditsRecharge: 'CreditsRecharge',
  TransactionHistory: 'TransactionHistory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
